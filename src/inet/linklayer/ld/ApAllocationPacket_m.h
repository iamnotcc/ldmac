//
// Generated file, do not edit! Created by nedtool 5.0 from inet/linklayer/ld/ApAllocationPacket.msg.
//

#ifndef __INET_APALLOCATIONPACKET_M_H
#define __INET_APALLOCATIONPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
    #include <vector>
// }}


namespace inet {

// cplusplus {{
	typedef std::vector<std::vector<int> > OutputMatrix;
// }}

/**
 * Class generated from <tt>inet/linklayer/ld/ApAllocationPacket.msg:28</tt> by nedtool.
 * <pre>
 * packet ApAllocationPacket
 * {
 *     int nColSlotNum;
 *     int nRowSlotNum;
 *     OutputMatrix omAllocationMatrix;
 * }
 * </pre>
 */
class ApAllocationPacket : public ::omnetpp::cPacket
{
  protected:
    int nColSlotNum;
    int nRowSlotNum;
    OutputMatrix omAllocationMatrix;

  private:
    void copy(const ApAllocationPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ApAllocationPacket&);

  public:
    ApAllocationPacket(const char *name=nullptr, int kind=0);
    ApAllocationPacket(const ApAllocationPacket& other);
    virtual ~ApAllocationPacket();
    ApAllocationPacket& operator=(const ApAllocationPacket& other);
    virtual ApAllocationPacket *dup() const {return new ApAllocationPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getNColSlotNum() const;
    virtual void setNColSlotNum(int nColSlotNum);
    virtual int getNRowSlotNum() const;
    virtual void setNRowSlotNum(int nRowSlotNum);
    virtual OutputMatrix& getOmAllocationMatrix();
    virtual const OutputMatrix& getOmAllocationMatrix() const {return const_cast<ApAllocationPacket*>(this)->getOmAllocationMatrix();}
    virtual void setOmAllocationMatrix(const OutputMatrix& omAllocationMatrix);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ApAllocationPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ApAllocationPacket& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_APALLOCATIONPACKET_M_H

