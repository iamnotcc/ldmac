//
// Generated file, do not edit! Created by nedtool 5.0 from inet/nic/ld/LdAck.msg.
//

#ifndef __INET_LDACK_M_H
#define __INET_LDACK_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

/**
 * Class generated from <tt>inet/nic/ld/LdAck.msg:19</tt> by nedtool.
 * <pre>
 * packet LdAck
 * {
 *     int nIndexSlot;
 *     int nSlotNum;
 *     bool bIsOver;
 * }
 * </pre>
 */
class LdAck : public ::omnetpp::cPacket
{
  protected:
    int nIndexSlot;
    int nSlotNum;
    bool bIsOver;

  private:
    void copy(const LdAck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LdAck&);

  public:
    LdAck(const char *name=nullptr, int kind=0);
    LdAck(const LdAck& other);
    virtual ~LdAck();
    LdAck& operator=(const LdAck& other);
    virtual LdAck *dup() const {return new LdAck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getNIndexSlot() const;
    virtual void setNIndexSlot(int nIndexSlot);
    virtual int getNSlotNum() const;
    virtual void setNSlotNum(int nSlotNum);
    virtual bool getBIsOver() const;
    virtual void setBIsOver(bool bIsOver);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LdAck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LdAck& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_LDACK_M_H

